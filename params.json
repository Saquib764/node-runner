{
  "name": "Node-runnr",
  "tagline": "Execute set of predefined tasks at a given time/times and at certain interval/s",
  "body": "# node-runnr\r\n\r\n`node-runnr` is easy to use task master. Execute set of predefined tasks at a given time/times and at certain interval/s.\r\n\r\n\r\n## Usage\r\n### Install using npm: \r\n```javascript\r\nnpm install node-runnr\r\n```\r\n### Overview\r\n'node-runnr' can execute an arbitrary task at multiple intervals and time. Unlike cron, input time format are in Human readable form. You can run jobs daily, weekly or monthly at multiple time/date. It exposes few APIs through which all jobs can be reschedules/stopped/start via front-end (You need to make a front-endfor that.)\r\n\r\nIt have a universal timer to monitor all jobs thus no need to re-evaluate jobs at every cycle, hence, its very lightweight. By default, clock cycle is 100ms i.e check and ecxecute task at every 100ms. However, custom cycle can be passed while creating a `runnr` object.\r\n\r\nFor documentation of v1.0.1, see `REAMMEv1.0.1.md` file.\r\n\r\n### Whats new in[and after] v1.1.0 ?\r\n\r\n2.\tMultiple callbacks/sub-jobs added. Results of job or previous sub-job can be passed on to next sub-job\r\n1.\tSimplified declaration of jobs.\r\n\r\n### Jobs and scheduling\r\n\r\nRequire `node-runnr`.\r\n```javascript\r\nvar Runnr = require('node-runnr');\r\nvar Jobs = new Runnr();\r\n```\r\nFor custom job cycle.\r\n```javascript\r\nvar Jobs = new Runnr(200);\r\n```\r\n\r\nTime format looks as follow:\r\n\r\n`Day:Hour:Min:Sec`\r\n\r\nFor example, `2: 12:30: 10` would run a job at every 2 days, 12 hour, 30 min and 10 seconds if its an interval job.\r\n\r\nIf its a monthly job, it will execute job on 2nd of every month at 12:30:10.\r\n\r\nIf its a weekly job, Monday, 12:30:10 every week. \r\n\r\n\r\nTo execute job at every 5 min, time string would be just `5:0`, and just `5` for every 5 sec and so on.\r\n\r\n###\tStructure.\r\n\r\nBasically, there are four parts for all job declaration.\r\n\r\n1.\tSetting job name, interval/time/schedule and details if any `[compulsory]`.\r\n\r\n2.\tPassing a job `[complusory]`.\r\n\r\n3.\tSequence of callbacks `[optional]`.\r\n\r\n4.\tExit callback. It get executed at the end of job and callbacks `[optional]`.\r\n\r\n\r\nExample,\r\n\r\n```javascript\r\nvar interval = Jobs.interval('myjob', '10:20', details)\r\n\t\t\t\t.job(job)\r\n\t\t\t\t.then(callback)\r\n\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t.exit(exitCallback)\r\n```\r\n\r\nAll `job` and `callback` functions have three parameters.\r\n`data` \t:\tData object passed from job aur previous sub-job. Its null for job.\r\n`next`\t:\tIts a function that envokes next `callback`. If its last callback it automatically invokes `exit`. Pass your data as parameter.\r\n`exit`\t:\tIt exits job, right away, without calling next callbacks.\r\n\r\n```javascript\r\nvar callback = function(data, next, exit){\r\n\tif(all well)\r\n\t\tnext(otherdata);\r\n\telse\r\n\t\texit(exitdata)\r\n}\r\n```\r\n\r\n###\tStarting timer.\r\nAfter declaring all jobs, start timer by executing `begin()`\r\n```javascript\r\nJobs.begin()\r\n```\r\n\r\nVoila, you have you jobs running.\r\n\r\n\r\n### Creating Jobs.\r\n`node-runnr` exposes four functions to create a job. All functions returns the name of job created.\r\n\r\n1. \tCreating an Interval job:\r\n\r\n\t```javascript\r\n\tvar interval = Jobs.interval('myjob', '10:20', details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\tThis will create a job named 'myjob' and execute at every 10 min and 20 seconds. We can set multiple intervals.\r\n\r\n\t```javascript\r\n\tvar interval = Jobs.interval('myjob', ['5:0', '10'], details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\r\n\tThis will execute job at 5 min, then 10 seconds after last execyte time, then 20 min after last time and then 5 min, and so on.\r\n\r\n2.\tCreating a daily job:\r\n\t\r\n\t```javascript\r\n\tvar daily = Jobs.daily('myjob', '10:20', details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\tThis will create a job at 00:10:20(00hr 10min 20sec). To create a job at 9:25 PM, enter `21:25:00`.\r\n\r\n\tTo execute a job at multiple time, i.e 9AM, 3PM, 10:30PM do as follow.\r\n\r\n\t```javascript\r\n\tvar daily = Jobs.daily('myjob', ['9:0:0', '15:0:0', '22:30:0'], details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\r\n3.\tCreating a weekly job:\r\n\tDay: 1-7, 1-Sunday, 7-Saturday\r\n\t\r\n\t```javascript\r\n\tvar weekly = Jobs.weekly('myjob', '2:0:10:20', details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\tThis will create a job on Monday,  at 00:10:20(00hr 10min 20sec).\r\n\r\n\tTo execute a job at multiple days, i.e Sunday 9AM, Tuesday 3PM, Friday 10:30PM do as follow.\r\n\r\n\t```javascript\r\n\tvar weekly = Jobs.weekly('myjob', ['1:9:0:0', '3:15:0:0', '6:22:30:0'], details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\r\n4.\tCreating a monthly job:\r\n\tDate: 1-31 (If month have 30 days, 31st job will be done on 1st of coming month)\r\n\t\r\n\t```javascript\r\n\tvar monthly = Jobs.monthly('myjob', '2:0:10:20', details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\tThis will create a job on 2nd, at 00:10:20(00hr 10min 20sec) of every month.\r\n\r\n\tTo execute a job at multiple dates, i.e 1st 9AM, 15th 3PM, 25th 10:30PM do as follow.\r\n\r\n\t```javascript\r\n\tvar monthly = Jobs.monthly('myjob', ['1:9:0:0', '15:15:0:0', '25:22:30:0'], details)\r\n\t\t\t\t\t.job(job)\r\n\t\t\t\t\t.then(callback)\r\n\t\t\t\t\t.then(anotherCallback)\r\n\t\t\t\t\t.exit(exitCallback)\r\n\t```\r\n\r\n\t`Note:` Name must be unique for all job.\r\n\r\n\r\n### Stop/cancel a job:\r\n\r\n```javascript\r\nvar stopped = Jobs.stop('myjob')\r\nconsole.log(stopped);\t\t// true or false\r\n```\r\n\r\nTo stop all running jobs.\r\n\r\n```javascript\r\nvar stopped = Jobs.stopAll()\r\nconsole.log(stopped);\t\t// true\r\n```\r\n\r\nTo remove a job forever -\r\n\r\n```javascript\r\nvar kill = Jobs.kill('myjob')\r\nconsole.log(kill);\t\t// true / false\r\n```\r\n\r\n### Start a stopped job\r\n\r\n```javascript\r\nvar start = Jobs.start('myjob')\r\nconsole.log(start);\t\t// true or false\r\n```\r\n\r\nTo stop all running jobs.\r\n\r\n```javascript\r\nvar start = Jobs.startAll()\r\nconsole.log(start);\t\t// true\r\n```\r\n\t\r\n### Reschedule a job\r\n\r\n`Warning`: This is not working on current version. Will fix this in comming update.\r\n\r\n```javascript\r\nvar job = Jobs.reschedule(interval, '20:10');\r\nconsole.log(job);\t\t// myjob. (interval = 'myjob')\r\n```\r\n\r\n### Get job\r\n\r\n```javascript\r\nvar job = Jobs.get(daily);\r\nconsole.log(job);\r\n/* Output\r\n{\r\n\tname: 'myjob',\r\n\tlast: Number,\t// Last run timestamp\r\n\tnext: Number,\t// Next scheduled run timestamp\r\n\tpause: Boolean,\t// Stopped or running\r\n\ttype: 'daily',\r\n\t_schedule: String,\t// entered time/interval string\r\n\tschedule: Array,\t// Evaluated timestamp or interval in ms\r\n\tdetails: Object,\t// Whatever object was entered during job creation\r\n}\r\n*/\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}